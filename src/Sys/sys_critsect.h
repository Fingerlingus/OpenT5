#pragma once

typedef enum {
    CRITSECT_FX_UNIQUE_HANDLE,
    CRITSECT_SOUND_OCCLUSION,
    CRITSECT_SOUND_COMMAND_ALLOC,
    CRITSECT_SOUND_COMMAND_PUSH,
    CRITSECT_SOUND_NOTIFY_ALLOC,
    CRITSECT_SOUND_NOTIFY_PUSH,
    CRITSECT_SOUND_PLAYBACK_ALLOC,
    CRITSECT_SOUND_BANK,
    CRITSECT_SOUND_REMOTE,
    CRITSECT_SOUND_LOOKUP_CACHE,
    CRITSECT_CONSOLE,
    CRITSECT_DEBUG_SOCKET,
    CRITSECT_COM_ERROR,
    CRITSECT_STATMON,
    CRITSECT_DEBUG_LINE,
    CRTISECT_DEBUG_BRUSHES_AND_PATCHES,
    CRITSECT_ALLOC_MARK,
    CRITSECT_FREE_MARK,
    CRITSECT_FX_PRIORITY_SEARCH,
    CRITSECT_FAKELAG,
    CRITSECT_CLIENT_MESSAGE,
    CRITSECT_CLIENT_CMD,
    CRITSECT_DOBJ_ALLOC,
    CRITSECT_XANIM_ALLOC,
    CRITSECT_KEY_BINDINGS,
    CRITSECT_FX_VIS,
    CRITSECT_SERVER_MESSAGE,
    CRITSECT_SCRIPT_STRING,
    CRITSECT_MEMORY_TREE,
    CRITSECT_ASSERT,
    CRITSECT_RD_BUFFER,
    CRITSECT_SYS_EVENT_QUEUE,
    CRITSECT_GPU_FENCE,
    CRITSECT_FATAL_ERROR,
    CRITSECT_DXDEVICE,
    CRITSECT_DXDEVICE_GLOB,
    CRITSECT_SCRIPT_DEBUGGER_ALLOC,
    CRITSECT_SCRIPT_DEBUGGER_SORT,
    CRITSECT_MISSING_ASSET,
    CRITSECT_PHYSICS,
    CRITSECT_PHYSICS_UPDATE,
    CRITSECT_PHYSICS_DESTRUCTIBLE_HIT,
    CRITSECT_LIVE,
    CRITSECT_AUDIO_PHYSICS,
    CRITSECT_CINEMATIC,
    CRITSECT_CINEMATIC_TARGET_CHANGE,
    CRITSECT_RB_TRANSFER,
    CRITSECT_STREAM_ASYNC_COMMAND,
    CRITSECT_STREAM_FORCE_LOAD_COMMAND,
    CRITSECT_STREAM_SYNC_COMMAND,
    CRITSECT_NETTHREAD_OVERRIDE,
    CRITSECT_DEMONWARE,
    CRITSECT_DEFERRED_DW,
    CRITSECT_IK,
    CRITSECT_TL_MEMALLOC,
    CRITSECT_VA_ALLOC,
    CRITSECT_MEMTRACK,
    CRITSECT_CBUF,
    CRITSECT_CURVEALLOC,
    CRITSEC_XAUDIO2_RELEASE_STREAM_BUFFER,
    CRITSECT_ZLIB,
    CRITSECT_BLACKBOX,
    CRITSECT_BLACKBOX_NET,
    CRITSECT_GDT_COMMAND,
    CRITSECT_STRINGED_COMMAND,
    CRITSECT_RADIANT_SERVER_COMMAND,
    CRITSECT_RADIANT_CLIENT_COMMAND,
    CRITSECT_RECORDER,
    CRITSECT_SERVERDEMO,
    CRITSECT_TENSION,
    CRITSECT_IO_SCHEDULER,
    CRITSECT_MEMFIRSTFIT,
    CRITSECT_FXBEAM,
    CRITSECT_GLASS_ACTIONS,
    CRITSECT_DBHASH,
    CRITSECT_COUNT
} CriticalSection;

typedef struct {
    long readCount;
    long writeCount;
} FastCriticalSection;

void Sys_InitializeCriticalSections();
void Sys_EnterCriticalSection(CriticalSection sect);
void Sys_LeaveCriticalSection(CriticalSection sect);
void Sys_LockWrite(FastCriticalSection* sect);